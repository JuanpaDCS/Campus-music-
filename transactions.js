// transactions.js - Transacciones MongoDB para Campus Music
// Implementaci√≥n de transacciones ACID para operaciones cr√≠ticas

use('campus_music');

console.log("=== TRANSACCIONES MONGODB - CAMPUS MUSIC ===");
console.log("Sistema de inscripciones con integridad de datos\n");

// ============================================================================
// FUNCI√ìN PRINCIPAL DE INSCRIPCI√ìN CON TRANSACCIONES
// ============================================================================

/**
 * Funci√≥n para inscribir un estudiante en un curso usando transacciones MongoDB
 * Esta funci√≥n garantiza la integridad de los datos mediante ACID properties
 * 
 * @param {ObjectId} estudianteId - ID del estudiante
 * @param {ObjectId} cursoId - ID del curso
 * @param {string} metodoPago - M√©todo de pago (efectivo, tarjeta, transferencia)
 * @param {string} observaciones - Observaciones adicionales
 */
function inscribirEstudianteEnCurso(estudianteId, cursoId, metodoPago = "tarjeta", observaciones = "") {
  
  console.log("üéØ INICIANDO TRANSACCI√ìN DE INSCRIPCI√ìN");
  console.log("=========================================");
  
  // Iniciar una sesi√≥n para la transacci√≥n
  const session = db.getMongo().startSession();
  
  try {
    // Iniciar la transacci√≥n
    session.startTransaction({
      readConcern: { level: "snapshot" },
      writeConcern: { w: "majority" }
    });
    
    console.log("‚úÖ Transacci√≥n iniciada exitosamente");
    console.log(`üìù Estudiante ID: ${estudianteId}`);
    console.log(`üìö Curso ID: ${cursoId}`);
    console.log(`üí≥ M√©todo de pago: ${metodoPago}`);
    
    // ========================================================================
    // PASO 1: Validar que el estudiante existe y est√° activo
    // ========================================================================
    console.log("\nüîç PASO 1: Validando estudiante...");
    
    const estudiante = db.estudiantes.findOne(
      { _id: estudianteId, activo: true },
      { session: session }
    );
    
    if (!estudiante) {
      throw new Error(`Estudiante con ID ${estudianteId} no encontrado o inactivo`);
    }
    
    console.log(`‚úÖ Estudiante validado: ${estudiante.nombre}`);
    console.log(`   Documento: ${estudiante.documento}`);
    console.log(`   Nivel musical: ${estudiante.nivelMusical}`);
    
    // ========================================================================
    // PASO 2: Validar que el curso existe, est√° activo y tiene cupos
    // ========================================================================
    console.log("\nüîç PASO 2: Validando curso y disponibilidad...");
    
    const curso = db.cursos.findOne(
      { _id: cursoId, activo: true },
      { session: session }
    );
    
    if (!curso) {
      throw new Error(`Curso con ID ${cursoId} no encontrado o inactivo`);
    }
    
    console.log(`‚úÖ Curso validado: ${curso.nombre}`);
    console.log(`   Instrumento: ${curso.instrumento}`);
    console.log(`   Nivel: ${curso.nivel}`);
    console.log(`   Cupos disponibles: ${curso.cuposDisponibles}/${curso.cupoMaximo}`);
    console.log(`   Costo: $${curso.costo.toLocaleString()}`);
    
    // Verificar cupos disponibles
    if (curso.cuposDisponibles <= 0) {
      throw new Error(`El curso "${curso.nombre}" no tiene cupos disponibles`);
    }
    
    // ========================================================================
    // PASO 3: Verificar que el estudiante no est√© ya inscrito en el curso
    // ========================================================================
    console.log("\nüîç PASO 3: Verificando inscripciones existentes...");
    
    const inscripcionExistente = db.inscripciones.findOne(
      {
        estudiante: estudianteId,
        curso: cursoId,
        estado: { $in: ["activa", "reservada"] }
      },
      { session: session }
    );
    
    if (inscripcionExistente) {
      throw new Error(`El estudiante ya est√° inscrito en el curso "${curso.nombre}"`);
    }
    
    console.log("‚úÖ No hay inscripciones duplicadas");
    
    // ========================================================================
    // PASO 4: Obtener informaci√≥n adicional (sede y profesor)
    // ========================================================================
    console.log("\nüîç PASO 4: Obteniendo informaci√≥n complementaria...");
    
    const sede = db.sedes.findOne(
      { _id: curso.sede },
      { session: session }
    );
    
    const profesor = db.profesores.findOne(
      { _id: curso.profesor },
      { session: session }
    );
    
    if (!sede || !profesor) {
      throw new Error("Error al obtener informaci√≥n de sede o profesor");
    }
    
    console.log(`‚úÖ Sede: ${sede.nombre} (${sede.ciudad})`);
    console.log(`‚úÖ Profesor: ${profesor.nombre}`);
    
    // ========================================================================
    // PASO 5: Crear la inscripci√≥n (INSERT en tabla inscripciones)
    // ========================================================================
    console.log("\nüìù PASO 5: Creando registro de inscripci√≥n...");
    
    const nuevaInscripcion = {
      estudiante: estudianteId,
      curso: cursoId,
      sede: curso.sede,
      profesor: curso.profesor,
      fechaInscripcion: new Date(),
      estado: "activa",
      costoTotal: curso.costo,
      metodoPago: metodoPago,
      observaciones: observaciones || `Inscripci√≥n autom√°tica en ${curso.nombre}`
    };
    
    const resultadoInscripcion = db.inscripciones.insertOne(
      nuevaInscripcion,
      { session: session }
    );
    
    if (!resultadoInscripcion.insertedId) {
      throw new Error("Error al crear la inscripci√≥n");
    }
    
    console.log(`‚úÖ Inscripci√≥n creada con ID: ${resultadoInscripcion.insertedId}`);
    
    // ========================================================================
    // PASO 6: Actualizar cupos disponibles del curso (UPDATE en tabla cursos)
    // ========================================================================
    console.log("\nüîÑ PASO 6: Actualizando cupos disponibles...");
    
    const resultadoActualizacion = db.cursos.updateOne(
      { _id: cursoId },
      { 
        $inc: { cuposDisponibles: -1 },
        $set: { fechaActualizacion: new Date() }
      },
      { session: session }
    );
    
    if (resultadoActualizacion.modifiedCount !== 1) {
      throw new Error("Error al actualizar los cupos del curso");
    }
    
    const nuevoCupo = curso.cuposDisponibles - 1;
    console.log(`‚úÖ Cupos actualizados: ${nuevoCupo}/${curso.cupoMaximo}`);
    
    // ========================================================================
    // PASO 7: Confirmar la transacci√≥n (COMMIT)
    // ========================================================================
    console.log("\nüíæ PASO 7: Confirmando transacci√≥n...");
    
    session.commitTransaction();
    console.log("‚úÖ TRANSACCI√ìN CONFIRMADA EXITOSAMENTE");
    
    // ========================================================================
    // RESUMEN DE LA OPERACI√ìN EXITOSA
    // ========================================================================
    console.log("\nüéâ INSCRIPCI√ìN COMPLETADA");
    console.log("=========================");
    console.log(`Estudiante: ${estudiante.nombre}`);
    console.log(`Curso: ${curso.nombre}`);
    console.log(`Sede: ${sede.nombre} (${sede.ciudad})`);
    console.log(`Profesor: ${profesor.nombre}`);
    console.log(`Costo: $${curso.costo.toLocaleString()}`);
    console.log(`M√©todo de pago: ${metodoPago}`);
    console.log(`ID Inscripci√≥n: ${resultadoInscripcion.insertedId}`);
    console.log(`Fecha: ${new Date().toISOString().split('T')[0]}`);
    console.log(`Cupos restantes: ${nuevoCupo}/${curso.cupoMaximo}`);
    
    return {
      success: true,
      inscripcionId: resultadoInscripcion.insertedId,
      estudiante: estudiante.nombre,
      curso: curso.nombre,
      costo: curso.costo,
      cuposRestantes: nuevoCupo
    };
    
  } catch (error) {
    // ========================================================================
    // MANEJO DE ERRORES - ROLLBACK DE LA TRANSACCI√ìN
    // ========================================================================
    console.log("\n‚ùå ERROR EN LA TRANSACCI√ìN");
    console.log("===========================");
    console.log(`Error: ${error.message}`);
    
    try {
      session.abortTransaction();
      console.log("üîô Transacci√≥n revertida (ROLLBACK)");
      console.log("   - No se cre√≥ la inscripci√≥n");
      console.log("   - No se modificaron los cupos");
      console.log("   - Estado de la base de datos restaurado");
    } catch (abortError) {
      console.log(`‚ùå Error al revertir transacci√≥n: ${abortError.message}`);
    }
    
    return {
      success: false,
      error: error.message,
      timestamp: new Date()
    };
    
  } finally {
    // ========================================================================
    // LIMPIEZA - CERRAR LA SESI√ìN
    // ========================================================================
    session.endSession();
    console.log("üîí Sesi√≥n de transacci√≥n cerrada");
  }
}

// ============================================================================
// EJEMPLOS DE USO DE LA FUNCI√ìN DE TRANSACCIONES
// ============================================================================

console.log("\n" + "=".repeat(50));
console.log("EJEMPLOS DE EJECUCI√ìN DE TRANSACCIONES");
console.log("=".repeat(50) + "\n");

// EJEMPLO 1: Inscripci√≥n exitosa
console.log("üìö EJEMPLO 1: INSCRIPCI√ìN EXITOSA");
console.log("-".repeat(35));

const resultado1 = inscribirEstudianteEnCurso(
  ObjectId("652a1234567890123456001"), // Juan Pablo Mart√≠nez
  ObjectId("653a1234567890123456003"), // Curso: Canto Popular
  "tarjeta",
  "Primera inscripci√≥n del estudiante en canto"
);

console.log("\nResultado:", resultado1);

console.log("\n" + "=".repeat(50));

// EJEMPLO 2: Intento de inscripci√≥n duplicada (debe fallar)
console.log("üìö EJEMPLO 2: INSCRIPCI√ìN DUPLICADA (DEBE FALLAR)");
console.log("-".repeat(48));

const resultado2 = inscribirEstudianteEnCurso(
  ObjectId("652a1234567890123456001"), // Mismo estudiante Juan Pablo
  ObjectId("653a1234567890123456001"), // Piano B√°sico (ya inscrito)
  "efectivo",
  "Intento de inscripci√≥n duplicada"
);

console.log("\nResultado:", resultado2);

console.log("\n" + "=".repeat(50));

// EJEMPLO 3: Inscripci√≥n en curso sin cupos (debe fallar)
console.log("üìö EJEMPLO 3: CURSO SIN CUPOS DISPONIBLES");
console.log("-".repeat(40));

const resultado3 = inscribirEstudianteEnCurso(
  ObjectId("652a1234567890123456014"), // Alejandra Mendoza
  ObjectId("653a1234567890123456007"), // Piano Avanzado (1 cupo disponible)
  "transferencia",
  "Intento de inscripci√≥n en curso lleno"
);

console.log("\nResultado:", resultado3);

// ============================================================================
// FUNCI√ìN ADICIONAL: TRANSACCI√ìN PARA CANCELAR INSCRIPCI√ìN
// ============================================================================

console.log("\n" + "=".repeat(50));
console.log("TRANSACCI√ìN ADICIONAL: CANCELAR INSCRIPCI√ìN");
console.log("=".repeat(50) + "\n");

/**
 * Funci√≥n para cancelar una inscripci√≥n y liberar el cupo
 * @param {ObjectId} inscripcionId - ID de la inscripci√≥n a cancelar
 * @param {string} motivoCancelacion - Motivo de la cancelaci√≥n
 */
function cancelarInscripcion(inscripcionId, motivoCancelacion = "Cancelaci√≥n voluntaria") {
  
  console.log("üö´ INICIANDO CANCELACI√ìN DE INSCRIPCI√ìN");
  console.log("=======================================");
  
  const session = db.getMongo().startSession();
  
  try {
    session.startTransaction({
      readConcern: { level: "snapshot" },
      writeConcern: { w: "majority" }
    });
    
    console.log(`üìù ID Inscripci√≥n: ${inscripcionId}`);
    console.log(`üìã Motivo: ${motivoCancelacion}`);
    
    // PASO 1: Validar que la inscripci√≥n existe y est√° activa
    const inscripcion = db.inscripciones.findOne(
      { _id: inscripcionId, estado: "activa" },
      { session: session }
    );
    
    if (!inscripcion) {
      throw new Error("Inscripci√≥n no encontrada o ya cancelada");
    }
    
    // PASO 2: Obtener informaci√≥n del curso
    const curso = db.cursos.findOne(
      { _id: inscripcion.curso },
      { session: session }
    );
    
    if (!curso) {
      throw new Error("Curso asociado no encontrado");
    }
    
    console.log(`‚úÖ Inscripci√≥n encontrada para curso: ${curso.nombre}`);
    
    // PASO 3: Actualizar estado de inscripci√≥n
    const resultadoCancelacion = db.inscripciones.updateOne(
      { _id: inscripcionId },
      { 
        $set: { 
          estado: "cancelada",
          fechaFinalizacion: new Date(),
          observaciones: inscripcion.observaciones + ` | CANCELADA: ${motivoCancelacion}`
        }
      },
      { session: session }
    );
    
    if (resultadoCancelacion.modifiedCount !== 1) {
      throw new Error("Error al cancelar la inscripci√≥n");
    }
    
    // PASO 4: Liberar el cupo en el curso
    const resultadoLiberacion = db.cursos.updateOne(
      { _id: inscripcion.curso },
      { 
        $inc: { cuposDisponibles: 1 },
        $set: { fechaActualizacion: new Date() }
      },
      { session: session }
    );
    
    if (resultadoLiberacion.modifiedCount !== 1) {
      throw new Error("Error al liberar el cupo del curso");
    }
    
    session.commitTransaction();
    
    console.log("‚úÖ CANCELACI√ìN EXITOSA");
    console.log(`   Cupo liberado en: ${curso.nombre}`);
    console.log(`   Nuevos cupos disponibles: ${curso.cuposDisponibles + 1}/${curso.cupoMaximo}`);
    
    return {
      success: true,
      inscripcionId: inscripcionId,
      curso: curso.nombre,
      cuposLiberados: 1
    };
    
  } catch (error) {
    console.log(`‚ùå Error: ${error.message}`);
    session.abortTransaction();
    console.log("üîô Transacci√≥n de cancelaci√≥n revertida");
    
    return {
      success: false,
      error: error.message
    };
    
  } finally {
    session.endSession();
  }
}

// EJEMPLO DE CANCELACI√ìN
console.log("üö´ EJEMPLO: CANCELAR UNA INSCRIPCI√ìN");
console.log("-".repeat(35));

// Buscar una inscripci√≥n activa para cancelar
const inscripcionParaCancelar = db.inscripciones.findOne({
  estado: "activa"
});

if (inscripcionParaCancelar) {
  const resultadoCancelacion = cancelarInscripcion(
    inscripcionParaCancelar._id,
    "Cancelaci√≥n por cambio de horario del estudiante"
  );
  console.log("\nResultado cancelaci√≥n:", resultadoCancelacion);
} else {
  console.log("No se encontraron inscripciones activas para cancelar");
}

// ============================================================================
// RESUMEN Y RECOMENDACIONES
// ============================================================================

console.log("\n" + "=".repeat(60));
console.log("RESUMEN DE IMPLEMENTACI√ìN DE TRANSACCIONES");
console.log("=".repeat(60));

console.log(`
‚úÖ CARACTER√çSTICAS IMPLEMENTADAS:
  ‚Ä¢ Transacciones ACID para inscripciones
  ‚Ä¢ Validaciones de integridad de datos
  ‚Ä¢ Manejo autom√°tico de rollback en errores
  ‚Ä¢ Actualizaci√≥n at√≥mica de cupos
  ‚Ä¢ Prevenci√≥n de inscripciones duplicadas
  ‚Ä¢ Funciones de cancelaci√≥n con liberaci√≥n de cupos
  
üõ°Ô∏è GARANT√çAS DE INTEGRIDAD:
  ‚Ä¢ Atomicidad: Todas las operaciones se ejecutan o ninguna
  ‚Ä¢ Consistencia: Estado v√°lido antes y despu√©s de la transacci√≥n
  ‚Ä¢ Aislamiento: Las transacciones no interfieren entre s√≠
  ‚Ä¢ Durabilidad: Los cambios confirmados son permanentes
  
üí° CASOS DE USO CUBIERTOS:
  ‚Ä¢ Inscripci√≥n exitosa de estudiante
  ‚Ä¢ Prevenci√≥n de inscripciones duplicadas
  ‚Ä¢ Control de cupos disponibles
  ‚Ä¢ Cancelaci√≥n con liberaci√≥n de cupos
  ‚Ä¢ Manejo de errores con rollback autom√°tico
  
üîß RECOMENDACIONES PARA PRODUCCI√ìN:
  1. Implementar logs detallados de todas las transacciones
  2. Configurar timeouts apropiados para transacciones largas
  3. Implementar retry logic para transacciones fallidas por concurrencia
  4. Usar √≠ndices apropiados para mejorar performance
  5. Monitorear m√©tricas de transacciones (tiempo, √©xito/fallo)
  6. Implementar notificaciones para errores cr√≠ticos
  7. Usar connection pooling para optimizar recursos
  8. Implementar circuit breakers para alta disponibilidad
`);

console.log("\nüéØ PR√ìXIMOS PASOS SUGERIDOS:");
console.log("1. Extender transacciones a reservas de instrumentos");
console.log("2. Implementar transacciones para cambios de horario de cursos");
console.log("3. Agregar transacciones para procesos de facturaci√≥n");
console.log("4. Crear sistema de auditor√≠a de transacciones");
console.log("5. Implementar transacciones distribuidas si se requiere escalabilidad");

console.log("\n=== TRANSACCIONES MONGODB IMPLEMENTADAS EXITOSAMENTE ===");